{"ast":null,"code":"import fetch from 'isomorphic-fetch';\nimport { API } from '../config';\nimport queryString from 'query-string';\nimport { isAuth, handleResponse } from './auth';\nexport var createBlog = function createBlog(blog, token) {\n  var createBlogEndpoint;\n\n  if (isAuth() && isAuth().role === 1) {\n    createBlogEndpoint = \"\".concat(API, \"/blog\");\n  } else if (isAuth() && isAuth().role === 0) {\n    createBlogEndpoint = \"\".concat(API, \"/user/blog\");\n  }\n\n  return fetch(\"\".concat(API, \"/blog\"), {\n    method: 'POST',\n    headers: {\n      Accept: 'application/json',\n      Authorization: \"Bearer \".concat(token)\n    },\n    body: blog\n  }).then(function (response) {\n    return response.json();\n  })[\"catch\"](function (err) {\n    return console.log(err);\n  });\n};\nexport var listBlogsWithCategoriesAndTags = function listBlogsWithCategoriesAndTags(skip, limit) {\n  var data = {\n    limit: limit,\n    skip: skip\n  };\n  return fetch(\"\".concat(API, \"/blogs-categories-tags\"), {\n    method: 'POST',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(data)\n  }).then(function (response) {\n    return response.json();\n  })[\"catch\"](function (err) {\n    return console.log(err);\n  });\n};\nexport var singleBlog = function singleBlog(slug) {\n  return fetch(\"\".concat(API, \"/blog/\").concat(slug), {\n    method: 'GET'\n  }).then(function (response) {\n    return response.json();\n  })[\"catch\"](function (err) {\n    return console.log(err);\n  });\n};\nexport var listRelated = function listRelated(blog) {\n  return fetch(\"\".concat(API, \"/blogs/related\"), {\n    method: 'POST',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(blog)\n  }).then(function (response) {\n    return response.json();\n  })[\"catch\"](function (err) {\n    return console.log(err);\n  });\n};\nexport var list = function list() {\n  return fetch(\"\".concat(API, \"/blogs\"), {\n    method: 'GET'\n  }).then(function (response) {\n    return response.json();\n  })[\"catch\"](function (err) {\n    return console.log(err);\n  });\n};\nexport var removeBlog = function removeBlog(slug, token) {\n  return fetch(\"\".concat(API, \"/blog/\").concat(slug), {\n    method: 'DELETE',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json',\n      Authorization: \"Bearer \".concat(token)\n    }\n  }).then(function (res) {\n    return res.json();\n  })[\"catch\"](function (err) {\n    return console.log(err);\n  });\n};\nexport var updateBlog = function updateBlog(blog, token, slug) {\n  return fetch(\"\".concat(API, \"/blog/\").concat(slug), {\n    method: 'PUT',\n    headers: {\n      Accept: 'application/json',\n      Authorization: \"Bearer \".concat(token)\n    },\n    body: blog\n  }).then(function (res) {\n    return res.json();\n  })[\"catch\"](function (err) {\n    return console.log(err);\n  });\n};\nexport var listSearch = function listSearch(params) {\n  var query = queryString.stringify(params);\n  return fetch(\"\".concat(API, \"/blogs/search?\").concat(query), {\n    method: 'GET'\n  }).then(function (response) {\n    return response.json();\n  })[\"catch\"](function (err) {\n    return console.log(err);\n  });\n};","map":{"version":3,"sources":["D:/myBlog/forntend/actions/blog.js"],"names":["fetch","API","queryString","isAuth","handleResponse","createBlog","blog","token","createBlogEndpoint","role","method","headers","Accept","Authorization","body","then","response","json","err","console","log","listBlogsWithCategoriesAndTags","skip","limit","data","JSON","stringify","singleBlog","slug","listRelated","list","removeBlog","res","updateBlog","listSearch","params","query"],"mappings":"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","sourcesContent":["  \r\nimport fetch from 'isomorphic-fetch';\r\nimport { API } from '../config';\r\nimport queryString from 'query-string';\r\nimport { isAuth, handleResponse } from './auth';\r\n\r\nexport const createBlog = (blog, token) => {\r\n\r\n    let createBlogEndpoint;\r\n\r\n    if (isAuth() && isAuth().role === 1) {\r\n        createBlogEndpoint = `${API}/blog`;\r\n    } else if (isAuth() && isAuth().role === 0) {\r\n        createBlogEndpoint = `${API}/user/blog`;\r\n    }\r\n    \r\n    return fetch(`${API}/blog`, {\r\n        method: 'POST',\r\n        headers: {\r\n            Accept: 'application/json',\r\n            Authorization: `Bearer ${token}`\r\n        },\r\n        body: blog\r\n    })\r\n        .then(response => {\r\n            return response.json();\r\n        })\r\n        .catch(err => console.log(err));\r\n};\r\n\r\nexport const listBlogsWithCategoriesAndTags = (skip, limit) => {\r\n    const data = {\r\n        limit,\r\n        skip\r\n    };\r\n    return fetch(`${API}/blogs-categories-tags`, {\r\n        method: 'POST',\r\n        headers: {\r\n            Accept: 'application/json',\r\n            'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify(data)\r\n    })\r\n        .then(response => {\r\n            return response.json();\r\n        })\r\n        .catch(err => console.log(err));\r\n};\r\n\r\nexport const singleBlog = slug => {\r\n    return fetch(`${API}/blog/${slug}`, {\r\n        method: 'GET'\r\n    })\r\n        .then(response => {\r\n            return response.json();\r\n        })\r\n        .catch(err => console.log(err));\r\n};\r\n\r\nexport const listRelated = (blog) => {\r\n   \r\n    return fetch(`${API}/blogs/related`, {\r\n        method: 'POST',\r\n        headers: {\r\n            Accept: 'application/json',\r\n            'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify(blog)\r\n    })\r\n        .then(response => {\r\n            return response.json();\r\n        })\r\n        .catch(err => console.log(err));\r\n};\r\n\r\nexport const list = () => {\r\n    return fetch(`${API}/blogs`, {\r\n        method: 'GET'\r\n    })\r\n        .then(response => {\r\n            return response.json();\r\n        })\r\n        .catch(err => console.log(err));\r\n};\r\n\r\nexport const removeBlog = (slug,token)=>{\r\n    return fetch(`${API}/blog/${slug}`,{\r\n        method:'DELETE',\r\n        headers: {\r\n            Accept: 'application/json',\r\n            'Content-Type': 'application/json',\r\n            Authorization:`Bearer ${token}`\r\n        },\r\n\r\n\r\n    }).then(res=>{\r\n        return res.json();\r\n\r\n    }).catch(err=>console.log(err));\r\n}\r\n\r\nexport const updateBlog =(blog,token,slug)=>{\r\n    return fetch(`${API}/blog/${slug}`,{\r\n\r\n        method:'PUT',\r\n        headers: {\r\n            Accept: 'application/json',\r\n            Authorization:`Bearer ${token}`\r\n        },\r\n        body:blog\r\n\r\n\r\n    }).then(res=>{\r\n        return res.json();\r\n\r\n    }).catch(err=>console.log(err));\r\n}\r\n\r\nexport const listSearch = (params) => {\r\n\r\n    let query=queryString.stringify(params);\r\n    return fetch(`${API}/blogs/search?${query}`, {\r\n        method: 'GET'\r\n    })\r\n        .then(response => {\r\n            return response.json();\r\n        })\r\n        .catch(err => console.log(err));\r\n};"]},"metadata":{},"sourceType":"module"}